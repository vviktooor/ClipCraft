
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import threading
import time
import tkinter
from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

import nltk
from customtkinter import *
from nltk.tokenize import sent_tokenize
from generate_voices import generate_voices
from generate_video import generate_video
from generate_images import generate_images
from generate_subtitles import generate_subtitles

def update_progressbar(step):
    progressbar.set(0)
    total_steps = 4
    if check_var_image.get() == "off":
        total_steps -= 1
    if check_var_video.get() == "off":
        total_steps -= 1
    if check_var_subtitles.get() == "off":
        total_steps -= 1
    progress = (step*total_steps) / (total_steps*total_steps)
    progressbar.set(progress)
    progressbar.update()
    time.sleep(2)

def split_into_chapters(text_entry, chapter_length):
    nltk.download('punkt')
    chapters = []
    sentences = sent_tokenize(text_entry)
    current_chapter = ''
    for sentence in sentences:
        if len(current_chapter) + len(sentence) < int(chapter_length):
            current_chapter += sentence + ' '
        else:
            chapters.append(current_chapter)
            current_chapter = sentence + ' '

    if current_chapter:
        chapters.append(current_chapter)

    print(chapters)
    return chapters

def main():
    video_entry = entry_1.get()
    image_entry = entry_2.get()
    chapter_entry = entry_3.get()
    text_entry = entry_4.get("1.0", END)
    openai_entry = entry_5.get()
    assemblyai_entry = entry_6.get()

    if not video_entry or not image_entry or not chapter_entry or not text_entry or not openai_entry or not assemblyai_entry:
        print("Error: Entry cannot be blank.")
        return

    image = check_var_image.get()
    video = check_var_video.get()
    subtitles = check_var_subtitles.get()

    combobox_value = combobox.get()
    print(image, video, subtitles)
    print(combobox_value)
    print(video_entry, image_entry, chapter_entry, text_entry, openai_entry, assemblyai_entry)

    chapters = split_into_chapters(text_entry, chapter_entry)
    l_of_chapters = len(chapters)

    current_step = 0

    if image == "on":
        t = threading.Thread(target=generate_images, args=(chapters, "chapter_images", image_entry, openai_entry))
        t.start()
        t.join()
        current_step += 1
        update_progressbar(current_step)

    if video == "on":
        t = threading.Thread(target=generate_voices, args=(chapters, combobox_value))
        t.start()
        t.join()
        current_step += 1
        update_progressbar(current_step)

        t = threading.Thread(target=generate_video, args=("chapter_images", "chapter_music",
                                                          "img_w_audio", video_entry, l_of_chapters))
        t.start()
        t.join()
        current_step += 1
        update_progressbar(current_step)

    if subtitles == "on":
        t = threading.Thread(target=generate_subtitles, args=(video_entry, assemblyai_entry))
        t.start()
        t.join()
        current_step += 1
        update_progressbar(current_step)


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("750x650")
window.configure(bg="#FFFFFF")


canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=650,
    width=750,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    375.0,
    33.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    120.0,
    33.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    469.0,
    198.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    307.0,
    119.0,
    image=image_image_4
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    467.0,
    147.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#BBC8F2",
    fg="#000716",
    font=('Arial', 12, 'bold'),
    highlightthickness=0
)
entry_1.place(
    x=230.0,
    y=135.0,
    width=474.0,
    height=22.0
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    259.0,
    179.0,
    image=image_image_5
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    467.0,
    212.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#BBC8F2",
    fg="#000716",
    font=('Arial', 12, 'bold'),
    highlightthickness=0
)
entry_2.place(
    x=230.0,
    y=200.0,
    width=474.0,
    height=22.0
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    467.0,
    271.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#BBC8F2",
    fg="#000716",
    font=('Arial', 12, 'bold'),
    highlightthickness=0
)
entry_3.place(
    x=230.0,
    y=259.0,
    width=474.0,
    height=22.0
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    273.0,
    244.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    102.0,
    198.0,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    102.0,
    118.0,
    image=image_image_8
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    81.0,
    145.0,
    image=image_image_9
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    341.0,
    20.0,
    image=image_image_10
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    89.0,
    215.0,
    image=image_image_11
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    78.0,
    180.0,
    image=image_image_12
)

check_var_image = tkinter.StringVar(value="on")
check_var_video = tkinter.StringVar(value="on")
check_var_subtitles = tkinter.StringVar(value="on")

checkbox_generate_image = CTkCheckBox(master=canvas, width=14, height=14, text="", variable=check_var_image,
                                      onvalue="on", offvalue="off", bg_color="#0F468C", fg_color="green",
                                      text_color="white", checkbox_width=23, checkbox_height=23, border_color="white")

checkbox_generate_image.place(x=175.0, y=145.0, anchor=tkinter.CENTER)

checkbox_generate_video = CTkCheckBox(master=canvas, width=14, height=14, text="", variable=check_var_video,
                                      onvalue="on", offvalue="off", bg_color="#0F468C", fg_color="green",
                                      text_color="white", checkbox_width=23, checkbox_height=23, border_color="white")

checkbox_generate_video.place(x=175.0, y=180.0, anchor=tkinter.CENTER)

checkbox_generate_subtitles = CTkCheckBox(master=canvas, width=14, height=14, text="", variable=check_var_subtitles,
                                          onvalue="on", offvalue="off", bg_color="#0F468C", fg_color="green",
                                          text_color="white", checkbox_width=23, checkbox_height=23,
                                          border_color="white")

checkbox_generate_subtitles.place(x=175.0, y=215.0, anchor=tkinter.CENTER)

optionmenu_var = StringVar(value="en_us_ghostface")  # set initial value

combobox = CTkOptionMenu(master=canvas,
                         values=[
    'en_us_ghostface', # Ghost Face
    'en_us_chewbacca',            # Chewbacca
    'en_us_c3po',                 # C3PO
    'en_us_stitch',               # Stitch
    'en_us_stormtrooper',         # Stormtrooper
    'en_us_rocket',               # Rocket

    # ENGLISH VOICES
    'en_au_001',                  # English AU - Female
    'en_au_002',                  # English AU - Male
    'en_uk_001',                  # English UK - Male 1
    'en_uk_003',                  # English UK - Male 2
    'en_us_001',                  # English US - Female (Int. 1)
    'en_us_002',                  # English US - Female (Int. 2)
    'en_us_006',                  # English US - Male 1
    'en_us_007',                  # English US - Male 2
    'en_us_009',                  # English US - Male 3
    'en_us_010',                  # English US - Male 4

    # EUROPE VOICES
    'fr_001',                     # French - Male 1
    'fr_002',                     # French - Male 2
    'de_001',                     # German - Female
    'de_002',                     # German - Male
    'es_002',                     # Spanish - Male

    # AMERICA VOICES
    'es_mx_002',                  # Spanish MX - Male
    'br_001',                     # Portuguese BR - Female 1
    'br_003',                     # Portuguese BR - Female 2
    'br_004',                     # Portuguese BR - Female 3
    'br_005',                     # Portuguese BR - Male

    # ASIA VOICES
    'id_001',                     # Indonesian - Female
    'jp_001',                     # Japanese - Female 1
    'jp_003',                     # Japanese - Female 2
    'jp_005',                     # Japanese - Female 3
    'jp_006',                     # Japanese - Male
    'kr_002',                     # Korean - Male 1
    'kr_003',                     # Korean - Female
    'kr_004',                     # Korean - Male 2

    # SINGING VOICES
    'en_female_f08_salut_damour',  # Alto
    'en_male_m03_lobby',           # Tenor
    'en_female_f08_warmy_breeze',  # Warmy Breeze
    'en_male_m03_sunshine_soon',   # Sunshine Soon

    # OTHER
    'en_male_narration',           # narrator
    'en_male_funny',               # wacky
    'en_female_emotional'],
    variable=optionmenu_var,
    width=75,
    height=25,
    bg_color="#03258C")

combobox.place(
    x=300.0,
    y=30.0)

progressbar = CTkProgressBar(master=canvas,
                             width=210,
                             height=25,
                             bg_color="#03258C",
                             progress_color="#3b8ed0",
                             border_color="white",
                             border_width=2,
                             fg_color="#36719f",
                             mode="determinate",
                             corner_radius=10)
progressbar.place(x=525.0, y=30.0)

progressbar.set(0)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    376.0,
    412.0,
    image=image_image_13
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    377.0,
    425.0,
    image=entry_image_4
)
entry_4 = Text(
    bd=0,
    bg="#0F468C",
    fg="white",
    font=('Arial', 11, 'bold'),
    highlightthickness=0
)
entry_4.place(
    x=42.0,
    y=344.0,
    width=670.0,
    height=160.0
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    256.0,
    604.0,
    image=image_image_14
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    117.0,
    605.0,
    image=image_image_15
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    256.0,
    542.0,
    image=image_image_16
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    93.0,
    543.0,
    image=image_image_17
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    324.5,
    543.0,
    image=entry_image_5
)
entry_5 = Entry(
    bd=0,
    bg="#BBC8F2",
    fg="#000716",
    font=('Arial', 12, 'bold'),
    highlightthickness=0
)
entry_5.place(
    x=182.0,
    y=531.0,
    width=285.0,
    height=22.0
)

entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    349.0,
    605.0,
    image=entry_image_6
)
entry_6 = Entry(
    bd=0,
    bg="#BBC8F2",
    fg="#000716",
    font=('Arial', 12, 'bold'),
    highlightthickness=0
)
entry_6.place(
    x=231.0,
    y=593.0,
    width=236.0,
    height=22.0
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    622.0,
    573.0,
    image=image_image_18
)


button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=main,
    relief="flat"
)
button_5.place(
    x=521.0,
    y=550.0,
    width=197.0,
    height=43.0
)

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    90.0,
    333.0,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    577.0,
    20.0,
    image=image_image_20
)

window.resizable(False, False)
window.mainloop()
